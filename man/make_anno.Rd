% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_anno.R
\name{make_anno}
\alias{make_anno}
\title{Make a Simple Annotaion File from Sport Output}
\usage{
make_anno(input, type = "counts", threads = 1, stat = TRUE)
}
\arguments{
\item{input}{A list object containing imported data.frames from Sports output
generated by \code{import_sports}, or a count table generated by
\code{c(make.counts, make.counts2)}.}

\item{type}{Character indicating whether the annotation should be generated
from a list with imported sports output files ("sports") or from a count table
("counts") (default="counts")}

\item{threads}{Integer stating the number of parallel jobs.}

\item{stat}{Logical stating if statistics should be generated (promts for user input).}
}
\value{
Each dataframe in the sports_lst object (list generated by
  \code{import_sports}) contains all unique sequences present within the
  original fastq raw sequence files. Sports counted these sequences, creating
  a table with the counts for each unique sequence. Most of these sequences
  will, however, be highly specific for a given sample. Given that a project
  often involves multiple samples, and that comparing groups across samples
  only is relevant if a sequence is consistently identified in at least one
  group, it is advisable to only analyze sequences with enough
  coverage/evidence across samples.

  Nevertheless, since all projects are unique, the user must be sure that the
  filtering criterias are compatible with the experimental design. For
  instance, in a project with few replicates you might have to handle noise
  using different strategies.

  A weak filter, like filt=2 (deafult), will remove data noise and decrease
  the file size, which will make dramatically will decrease the processing
  times and hardware resources in downstream analysis.

  If stat=TRUE (default/recommended), the function will first generate
  statistics based on overlapping sequences across all the files in the
  imported list (sports_lst) and promt the user for input before progressing.
  If stat=FALSE, no statistics will be generated and the user will not be
  promted.

  Using threads > 1, the final  will be  in parallell Use \code{parallel::detectcores()} to see available
  threads on the computer. Do not exceed the number of available threads!
}
\description{
\code{make_anno} uses parallel processing to generate a simple annotation
file from a Sports output list (generated by \code{import_sports}).
}
\details{
Given a list of imported Sports output data.frames (generated by
\code{import_sports}), this function will filter and join overlapping
annotations in the output list creating a master annotation file in common
for all imported output files.
}
\examples{
  anno <- make_anno(sports_lst = <name_of_your_imported_sports_list>,
                      threads    = <number_of_jobs>,
                      stat       = <TRUE/FALSE_should_statistics_be_produced?>,
                      )

 anno <- make_anno(sports_lst = sports_lst, threads=12,  stat= TRUE)

}
\seealso{
\url{https://github.com/junchaoshi/sports1.0} for download and
  documentation about running Sports. \url{https://github.com/Danis102} for
  updates on the current package.

Other PAC generation: 
\code{\link{import_sports}()},
\code{\link{make_PAC}()},
\code{\link{make_counts2}()},
\code{\link{make_counts}()},
\code{\link{make_pheno}()},
\code{\link{progress_report}()}
}
\concept{PAC generation}
