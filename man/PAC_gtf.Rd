% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PAC_gtf.R
\name{PAC_gtf}
\alias{PAC_gtf}
\title{Annotate against a GTF file}
\usage{
PAC_gtf(
  PAC,
  genome = NULL,
  mismatches = 3,
  return = "simplify",
  stranded = FALSE,
  gtf_repeat = NULL,
  gtf_protein = NULL,
  gtf_other = NULL,
  target_other = NULL,
  threads = 1
)
}
\arguments{
\item{PAC}{PAC-list object. The Anno object needs to contain genome
coordinates in the following columns: "chr","start","end", and "strand".
These coordinates are eaisly obtained by using \code{PAC_genome}}

\item{genome}{Character indicating the path to a reference genome file in
fasta format. Note that a bowtie index, created by for example
Rbowtie::bowtie-build,  must be contained in the same folder and having the
same basename as the fasta.}

\item{mismatches}{Integer indicating the number of allowed mismatches for the
genome mapping.}

\item{return}{Character indicating what information to return. 

   If return="simplify" (default), a table containing with one unique
   sequence per row will be returned. Multiple hits between genomic
   coordinates and gtf coordinates will be merged and only unique annotations
   will be reported.
   
   If return="full", a list will be returned containing 1 table reporting all
   annotations for each genomic coordinate of each unique sequence.
   
   If return="all", both a simplified table and a full annotation list will
   be returned as a list.
   
   If return="merge", a simplified table will be merged with the Anno table
   of the provided PAC object, and an updated PAC object containing the new
   annotations will be returned.}

\item{gtf_repeat}{Character indicating the file path to a repeatMasker
formated gtf file (containing 'repFamily', 'repClass' and 'repName' column
names when imported using rtracklayer::readGFF). Can also directly be
provided as a tibble data frame.}

\item{gtf_protein}{Character indicating the file path to an Ensembl formated
gtf file (containing 'type', 'gene_name', 'gene_biotype', 'exon_number',
'strand' column names when imported using rtracklayer::readGFF). Can also
directly be provided as a tibble data frame.}

\item{gtf_other}{Named list of characters, indicating file path(s) to other
gtf files with differing formats. Can also directly be provided as a tibble
dataframe in a named list.}

\item{target_other}{Named list of character vectors indicating target columns
in the listed gtf files in \emph{gtf_other}. Important, the listed objects
must have the same length and names as in \emph{gtf_other}. The vector
indicates the column names as if imported by rtracklayer::readGFF.}

\item{threads}{Integer indicating the number of parallel processes.}
}
\value{
List, tibble dataframe or updated PAC object. See \emph{return} for
  more information.
}
\description{
This function will annotate a PAC object using input from a GTF/GFF file.
}
\details{
Given a PAC object and a gtf formated annotation file(s), this function will
attempt to annotate sequences mapped to a reference genome against genomic
coordinates in the gtf file(s). In case no genomic mapping coordinates are
available in the PAC object, the function provides a backdoor into the
\emph{PAC reannotation} workflow, where genome mapping is performed using
Bowtie.
}
\examples{

library(seqpac)
load(system.file("extdata", "drosophila_sRNA_pac_anno.Rdata", package = "seqpac", mustWork = TRUE))

##############################################################
## Simplified repeatmasker annotation with genomic mapping
  
genome <- "/home/danis31/Desktop/Temp_docs/fasta/biomartr_genome/chromosomes.fa"
gtf_repeat <- "/home/danis31/Desktop/Temp_docs/fasta/repeatMasker/repeatMasker_ensembl.gtf"

# Only returns tibble:
repeat_simple <- PAC_gtf(pac, genome=genome, return="simplify", gtf_repeat=gtf_repeat, threads=10)

# Merge with PAC$Anno dataframe: 
pac_merge <- PAC_gtf(pac, genome=genome, return="merge", gtf_repeat=gtf_repeat, threads=10)        


##############################################################
## Full output previously mapped columns up to 3 mismatches

# Generates an error because genome mapping was done
# with add_reanno(genome_max=10):
genome_col <- colnames(pac$Anno)[grepl("chromosomes_genome", colnames(pac$Anno))]

repeat_full <- PAC_gtf(pac, genome=genome_col, return="full", gtf_repeat=gtf_repeat, threads=10) 

# Works because PAC_gtf automatically maps the genome with add_reanno(genome_max="all")
genome_col <- colnames(pac_merge$Anno)[grepl("^genome|mis\\\\d_genome", colnames(pac_merge$Anno))]
repeat_full <- PAC_gtf(pac_merge, genome=genome_col, return="full", gtf_repeat=gtf_repeat, threads=10)

# return="full" returns all annotation for all each coordinate
repeat_full[800:820]
head(repeat_full["TGCGGAAGGATCATTA_mis0"])
     

##############################################################
## With additional gtfs including custom other
gtf_repeat <- "/home/danis31/Desktop/Temp_docs/fasta/repeatMasker/repeatMasker_ensembl.gtf"
gtf_protein <- "/data/Data_analysis/Genomes/Drosophila/dm6/Ensembl/dm6_ensembl_release_101/gtf/Drosophila_melanogaster.gtf"

# Note, target_other points to columns in each gtf listed in gtf_other 
# and the list objects must therefore have the same names:
gtf_other=list(rep=gtf_repeat, prot=gtf_protein)
target_other=list(rep="repFamily", prot=c("type", "gene_id")) 

genome_col <- colnames(pac_merge$Anno)[grepl("^genome|mis\\\\d_genome", colnames(pac_merge$Anno))]
many_simply <- PAC_gtf(pac_merge, genome=genome_col, return="simplify", mismatches=3,
                       gtf_repeat=gtf_repeat, gtf_protein=gtf_protein,  
                       gtf_other=gtf_other, target_other=target_other, threads=10)

# With perfect alignments (0 mismatches)
many_simply <- PAC_gtf(pac_merge, genome=genome_col, return="simplify", mismatches=0,
                       gtf_repeat=gtf_repeat, gtf_protein=gtf_protein, threads=10)

##############################################################
## Convert of UCSC to Ensembl (Tanks to Devon Ryan and co-workers)

# Go to https://github.com/dpryan79/ChromosomeMappings
# Locate your genome of choice
# Download from raw.githubusercontent:
dm6_conv <- readr::read_tsv("https://raw.githubusercontent.com/dpryan79/ChromosomeMappings/master/BDGP6_UCSC2ensembl.txt", col_names=FALSE)
names(dm6_conv) <- c("ucsc", "ensembl")

# Fix mito genome name (should not contain "dmel_")
dm6_conv[grepl("mito", dm6_conv$ensembl),]
dm6_conv$ensembl <- gsub("dmel_mitochondrion_genome", "mitochondrion_genome", dm6_conv$ensembl) 

# Load local UCSC formated file and make a new converted vector 
gtf_repeat <- "/home/danis31/Desktop/Temp_docs/fasta/repeatMasker/repeatMasker.gtf"
repeat_gtf <- rtracklayer::readGFF(gtf_repeat)
convec <- dm6_conv$ensembl[match(as.character(repeat_gtf$seqid),   as.character(dm6_conv$ucsc))]

# Test that the convercsion went well
test <- cbind(convec, as.character(repeat_gtf$seqid))
test2 <- unique(paste( test[,1], test[,2], sep="|"))
table(table(do.call("rbind", strsplit(test2, "\\\\|"))[,1]) == 1) # All TRUE

# Exchange the chromosomal names, convert to genomic ranges and save your fil as gtf 
repeat_gtf$seqid <- convec
gr <- GenomicRanges::GRanges(seqnames=repeat_gtf$seqid, IRanges::IRanges(repeat_gtf$start, repeat_gtf$end), strand=repeat_gtf$strand)
GenomicRanges::mcols(gr) <- data.frame(type="repeat", source="repeatMasker_dm6_ucsc",
                                       repName = repeat_gtf$repName, repClass = repeat_gtf$repClass,
                                       repFamily = repeat_gtf$repFamily)
rtracklayer::export(gr, file.path(dirname(gtf_repeat), "repeatMasker_ensembl.gtf"), format="gtf")


}
\seealso{
\url{https://github.com/Danis102} for updates.

Other PAC analysis: 
\code{\link{PAC_covplot}()},
\code{\link{PAC_deseq}()},
\code{\link{PAC_filter}()},
\code{\link{PAC_filtsep}()},
\code{\link{PAC_jitter}()},
\code{\link{PAC_mapper}()},
\code{\link{PAC_mismap}()},
\code{\link{PAC_nbias}()},
\code{\link{PAC_norm}()},
\code{\link{PAC_pca}()},
\code{\link{PAC_pie}()},
\code{\link{PAC_pirna}()},
\code{\link{PAC_rpm}()},
\code{\link{PAC_saturation}()},
\code{\link{PAC_sizedist}()},
\code{\link{PAC_stackbar}()},
\code{\link{PAC_summary}()},
\code{\link{PAC_trna}()},
\code{\link{map_rangetype}()}
}
\concept{PAC analysis}
