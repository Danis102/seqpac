% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filtsep_bin.R
\name{filtsep_bin}
\alias{filtsep_bin}
\title{Binary converter for PAC_filtsep}
\usage{
filtsep_bin(filtsep_out)
}
\arguments{
\item{filtsep_out}{PAC_filtsep output data.frame, where each column contains
the names of sequences that passed the filter for a specific group
specified by a pheno_target object.}
}
\value{
data.frame where each uniques sequence (row names) in filtsep_out are
  reported as hit (=1) or no hit (=0) across samples or sample groups (column
  names).
}
\description{
\code{filtsep_bin} Converts PAC_filtsep data.frame output into a binary
(hit-no-hit) data.frame
}
\details{
Given a PAC_filtsep output data.frame, where each column contains the
sequences that passed the filter for a specific group specified in
pheno_target, filtsep_bin converts this into a data.frame where sequences are
reported as hit (=1) or no hit (=0). Such binary coded group occurance can
for example be used by UpSetR::upset to generate visualization of overlaps
using UpSet plots.
}
\examples{

load(system.file("extdata", "drosophila_sRNA_pac_filt_anno.Rdata", 
                  package = "seqpac", mustWork = TRUE))

## Keep sequences with 5 counts (threshold) in 100\% (coverage) of 
## samples in a group:
 # Use PAC_filtsep to find sequences 
 filtsep <- PAC_filtsep(pac, norm="counts", threshold=5, 
                        coverage=100, pheno_target= list("stage"))
                        
 # Filter by unique sequences passing filtsep  
 filtsep <- unique(do.call("c", as.list(filtsep)))
 pac_filt <- PAC_filter(pac, subset_only = TRUE, anno_target= filtsep)
 
 # Find overlap
 olap <- reshape2::melt(filtsep, 
                        measure.vars = c("Stage1", "Stage3", "Stage5"), 
                        na.rm=TRUE)
                        
## Upset plot using the UpSetR package
 # (when output="binary" PAC_filtsep uses filtsep_bin for binary conversion
 # Use PAC_filtsep with binary output
 filtsep_bin <- PAC_filtsep(pac, norm="counts", threshold=5, 
                            coverage=100, pheno_target= list("stage"), 
                            output="binary")
 
# Plot Wenn diagram or UpSetR
#
# plot(venneuler::venneuler(data.frame(olap[,2], olap[,1]))) 
#
# UpSetR::upset(filtsep_bin, sets = colnames(filtsep_bin), 
#              mb.ratio = c(0.55, 0.45), order.by = "freq", keep.order=TRUE)
             
}
\seealso{
\url{https://github.com/Danis102} for updates on the current
  package.

Other PAC analysis: 
\code{\link{PAC_covplot}()},
\code{\link{PAC_deseq}()},
\code{\link{PAC_filter}()},
\code{\link{PAC_filtsep}()},
\code{\link{PAC_gtf}()},
\code{\link{PAC_jitter}()},
\code{\link{PAC_mapper}()},
\code{\link{PAC_nbias}()},
\code{\link{PAC_norm}()},
\code{\link{PAC_pca}()},
\code{\link{PAC_pie}()},
\code{\link{PAC_saturation}()},
\code{\link{PAC_sizedist}()},
\code{\link{PAC_stackbar}()},
\code{\link{PAC_summary}()},
\code{\link{PAC_trna}()},
\code{\link{as.PAC}()},
\code{\link{map_rangetype}()},
\code{\link{tRNA_class}()}
}
\concept{PAC analysis}
