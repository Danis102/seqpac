% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PAC_covplot.R
\name{PAC_covplot}
\alias{PAC_covplot}
\title{Plot sequence covarage over a reference}
\usage{
PAC_covplot(PAC, map, summary_target = NULL, map_target = NULL,
  style = "line", xseq = TRUE, colour = c("black", "red", "grey",
  "blue"))
}
\arguments{
\item{PAC}{PAC-list object.}

\item{map_target}{(optional) Character vector. 
Imporant: This is similar to an anno_target, but instead extract
target references in the PAC_mapping object. Should contain search
terms that can find unique strings in the reference names. The search
terms are parse to grepl("<search terms>, names(<PAC_mapping object>)).
(default=NULL)}

\item{PAC_map}{PAC_map object generated by \emph{PAC_mapping}.}

\item{pheno_target}{(optional) List with: 
1st object being a character vector of target column in Pheno, 2nd
object being a character vector of the target group(s) in the target
Pheno column (1st object) on which group statsitics should be
calculated. (default=NULL)}

\item{group_stat}{Character indicating what type of statistical summary that
should be used when plotting.}

\item{threads}{Integer indicating the number of parallel processes that
should be used.}

\item{par_type}{Character indicating if "PSOCK" or "FORK" should be parsed to
parallel::makeCluster (default="PSOCK").}
}
\value{
Plot list with plots generated by ggplot2
}
\description{
\code{PAC_covplot} Plotting sequences in a PAC object using an PAC mapping object.
}
\details{
Given a PAC object and a PAC_map object generated by \emph{PAC_mapping}
this function will attempt to plot the sequence coverage over long
references.
}
\examples{

### Load data ###
reanno_path="/data/Data_analysis/Projects/Pigs/Specific_projects/SRA_download/SRP135969_Sperm_Exosomes_Hemicastration/Processed_Pipeline31_05-03-20/R_files/"
load(file=paste0(reanno_path, "PAC_filt_rpm10in25.Rdata"))



## Filter out biotype of interest
table(PAC_filt$Anno$Biotypes_tRNA)
PAC_filt_tRNA <- PAC_filter(PAC_filt, anno_target=list("Biotypes_tRNA", c("Mt_tRNA", "tRNA")), subset_only=TRUE)
table(PAC_filt_tRNA$Anno$Biotypes_tRNA)

## Mapping
ref_path <- "/data/Data_analysis/Genomes/Pigs/Sports/Sus_scrofa/tRNA_reanno/tRNA_mature.fa"
PAC_map <- PAC_mapper(PAC=PAC_filt_tRNA, ref_path, threads=8, mismatches=0)
table(rownames(PAC_filt_tRNA$Anno) \%in\%  unique(do.call("c", lapply(PAC_map, function(x){ rownames(x[[2]])}))))

## Make summary
PAC_filt_tRNA <- PAC_summary(PAC_filt_tRNA, norm = "rpm", type = "means", pheno_target=list("Index", unique(PAC_filt_tRNA$Pheno$Index)))

PAC_filt_tRNA <- PAC_summary(PAC_filt_tRNA, norm = "rpm", type = "se", pheno_target=list("Index", c("sperm_cells_HC", "sperm_cells_CT")))

plot_lst <- PAC_covplot(PAC_filt_tRNA, PAC_map, map_target, summary_target = list("means_[Index]", NULL), style="line", colour=c("black", "red", "grey", "blue"))

names(plot_lst)[grepl("Arg", names(plot_lst))]
names(plot_lst)[grepl("LeuCAA", names(plot_lst))]


sub_plots_lst <- plot_lst[grepl("Arg", names(plot_lst))]
sub_plots_lst <- plot_lst[grepl("LeuCAA", names(plot_lst))]

cowplot::plot_grid(sub_plots_lst[[1]],sub_plots_lst[[2]],sub_plots_lst[[3]],sub_plots_lst[[4]],sub_plots_lst[[5]], sub_plots_lst[[6]])


}
\seealso{
\url{https://github.com/Danis102} for updates on the current
  package.

Other PAC analysis: \code{\link{PAC_deseq}},
  \code{\link{PAC_filter}}, \code{\link{PAC_jitter}},
  \code{\link{PAC_mapper}}, \code{\link{PAC_nbias}},
  \code{\link{PAC_pca}}, \code{\link{PAC_pie}},
  \code{\link{PAC_rpm}}, \code{\link{PAC_saturation}},
  \code{\link{PAC_stackbar}}, \code{\link{PAC_summary}}
}
\concept{PAC analysis}
