% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PAC_pca.R
\name{PAC_pca}
\alias{PAC_pca}
\title{Pie plot from PAC}
\usage{
PAC_pca(PAC, type = "counts", pheno_target = NULL,
  anno_target = NULL)
}
\arguments{
\item{PAC}{PAC-list object.}

\item{type}{Character indicating what type of data to be used. If
type="counts" the PCA will be conducted on the raw Counts. If type="rpm" the
analysis will be done on rpm values returned from PAC_rpm function and
stored in the norm folder of the PAC-list object.}

\item{pheno_target}{List with: 1st object being character vector of target
column(s) in Pheno, 2nd object being a character vector of the target
group(s) in the target column (1st object). Important, the 2nd object is
order sensitive, meaning that categories will appear in the same order in
the pie. (default=NULL)}

\item{anno_target}{List with: 1st object being character vector of target
column(s) in Anno, 2nd object being a character vector of the target
biotype(s) in the target column (1st object). Important, the 2nd object is
order sensitive, meaning that categories will appear in the same order in
the pie. (default=NULL)}
}
\value{
A PCA list object generated by the PCA function in the FactoMineR
 package
}
\description{
\code{PAC_pca} PAC principle component analysis.
}
\details{
Given a PAC object the function will perform a principle component analysis
calling the PCA function in the FactoMineR package.
}
\examples{

### Load data ###
path="/data/Data_analysis/Projects/Drosophila/Other/IOR/Joint_analysis/R_analysis/"
load(file=paste0(path, "PAC_all.Rdata"))


# First apply shallow counts filter, and then generate rpm on which rpm filter is applied.

PAC_filt <- PAC_filter(PAC_all, size=c(16,45), threshold=10, coverage=5, type="counts", stat=FALSE, pheno_target=NULL, anno_target=NULL)
PAC_filt <- PAC_rpm(PAC_filt)
PAC_filt <- PAC_filter(PAC_filt, size=c(16,45), threshold=10, coverage=5, type="rpm", stat=FALSE, pheno_target=NULL, anno_target=NULL)

pca_all_cnt <- PAC_pca(PAC_filt, type="counts")
pca_all_rpm <- PAC_pca(PAC_filt, type="rpm")

groups <- paste(substr(PAC_filt$Pheno$SampleProject, 1, 3), PAC_filt$Pheno$Method, PAC_filt$Pheno$Method_tag, PAC_filt$Pheno$Tag, sep="_")
lab_df <- data.frame(lab=c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O"), fact=unique(groups))
labs <- as.character(lab_df$lab[match(groups, lab_df$fact)])
groups <- paste(labs, groups, sep="_")

data.frame(lib_size=colSums(PAC_filt$Counts), group=groups)

ggbiplot::ggbiplot(pcobj = pca_all_cnt, choices=c(1,2), scale = 0, obs.scale = 0, var.scale = 0, groups = groups, labels=labs, labels.size=5, ellipse = FALSE, var.axes = FALSE)
ggbiplot::ggbiplot(pcobj = pca_all_cnt, choices=c(1,3), scale = 0, obs.scale = 0, var.scale = 0, groups = groups, labels=labs, labels.size=5, ellipse = FALSE, var.axes = FALSE)
ggbiplot::ggbiplot(pcobj = pca_all_cnt, choices=c(2,3), scale = 0, obs.scale = 0, var.scale = 0, groups = groups, labels=labs, labels.size=5, ellipse = FALSE, var.axes = FALSE)

ggbiplot::ggbiplot(pcobj = pca_all_rpm, choices=c(1,2), scale = 0, obs.scale = 0, var.scale = 0, groups = groups, labels=labs, labels.size=5, ellipse = FALSE, var.axes = FALSE)
ggbiplot::ggbiplot(pcobj = pca_all_rpm, choices=c(1,3), scale = 0, obs.scale = 0, var.scale = 0, groups = groups, labels=labs, labels.size=5, ellipse = FALSE, var.axes = FALSE)
ggbiplot::ggbiplot(pcobj = pca_all_rpm, choices=c(2,3), scale = 0, obs.scale = 0, var.scale = 0, groups = groups, labels=labs, labels.size=5, ellipse = FALSE, var.axes = FALSE)

}
\seealso{
\url{https://github.com/Danis102} for updates on the current package.

Other PAC analysis: \code{\link{PAC_covplot}},
  \code{\link{PAC_deseq}}, \code{\link{PAC_filter}},
  \code{\link{PAC_jitter}}, \code{\link{PAC_mapper}},
  \code{\link{PAC_nbias}}, \code{\link{PAC_pie}},
  \code{\link{PAC_rpm}}, \code{\link{PAC_saturation}},
  \code{\link{PAC_stackbar}}, \code{\link{PAC_summary}}
}
\concept{PAC analysis}
