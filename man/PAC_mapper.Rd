% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PAC_mapper.R
\name{PAC_mapper}
\alias{PAC_mapper}
\title{Advanced sequence mapping of a PAC object}
\usage{
PAC_mapper(
  PAC,
  ref,
  mapper = "reanno",
  mismatches = 0,
  threads = 1,
  N_up = "",
  N_down = "",
  report_string = FALSE
)
}
\arguments{
\item{PAC}{PAC-list object.}

\item{ref}{Character indicating the path to the fasta (.fa) reference
file or a DNAStringSet with already loaded reference sequences.}

\item{mapper}{Character indicating what align engine to be used. If
mapper="reanno" (default) PAC_mapper will create temporary files and
generate missing bowtie indexes for a reannotion workflow (see
\code{?map_reanno}. Important, for PAC_mapper to successfully tap into the
reannotation workflow, the names of ref (fasta or DNAStringSet) cannot
contain any ";" characters. If mapper="vmatch", PAC_mapper will instead use
the \code{vmatchPattern} function in the Biostrings package. While the
mapper="reanno" is by far the fastest option, mapper="vmatch" does not
require bowtie indexes.}

\item{mismatches}{Integer indicating the number of mismatches that should be
allowed in the mapping.}

\item{threads}{Integer indicating the number of parallel processes that
should be used.}

\item{N_up}{Character indicating a sequence that should be added to the
reference at the 5' end prior to mapping. A wild card nucleotides "NNN"
(any of C, T, G, A) can for example be added for mapping non-perfect
reference hits. No nucleotides are added by default.}

\item{N_down}{Character. Same as N_up but indicating a sequence that should
be added to the reference at the 3' end. Useful for tRNA analysis where the
reference do not contain pre-processed tRNA. Setting N_down="NNN" or "CCA"
(in many species CCA is added to mature tRNA) will allow mapping against
the mature tRNA. No nucleotides are added by default.}

\item{report_string}{Logical whether an alignment string that shows in
character where sequences align against the reference. Works well with
tRNA, but makes the Alignments object difficult to work with when longer
references are used (default=FALSE).}
}
\value{
Stacked list, where each object on the highest level contains:
                   (Object 1) Reference name and sequence. 
                   (Object 2) Dataframe showing the mapping results of
                              each quiary sequence that mapped to Object 1.
}
\description{
\code{PAC_mapper} Mapping sequences against a reference.
}
\details{
Given a PAC object and the path to a fasta reference file, this function will
map sequences in PAC and mapping extract information.
}
\examples{



#-------------------------------------------------------------------------#
### For coverage plots ###
#-------------------------------------------------------------------------#

path="/data/Data_analysis/Projects/Drosophila/Other/IOR/Joint_analysis/R_analysis/"
load(file=paste0(path, "PAC_all.Rdata"))



PAC_filt <- PAC_filter(PAC_all, size=c(16,70), threshold=10, coverage=5, type="counts", stat=FALSE, pheno_target=NULL, anno_target=NULL)
PAC_filt <- PAC_rpm(PAC_filt)
PAC_filt <- PAC_filter(PAC_filt, size=c(16,70), threshold=10, coverage=5, type="rpm", stat=FALSE, pheno_target=NULL, anno_target=NULL)

## Remove corrupt samples and make means 
Ph_trg <- as.character(PAC_filt$Pheno$Sample[!PAC_filt$Pheno$Sample \%in\% "Inx24_200130_S12"])
PAC_filt <- PAC_filter(PAC_filt, pheno_target= list("Sample", Ph_trg))

PAC_filt$Pheno$Groups <- paste(do.call("rbind", strsplit(as.character(PAC_filt$Pheno$SampleProject), "_" ))[,1], PAC_filt$Pheno$Method, PAC_filt$Pheno$Method_tag, PAC_filt$Pheno$Tag, sep="_")

## Make summaries
PAC_filt <- PAC_summary(PAC_filt, norm = "rpm", type = "means", pheno_target=list("Groups", unique(PAC_filt$Pheno$Groups)))

## Mapping
map_rRNA <- PAC_mapper(PAC_filt, ref="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/rRNA_reanno/drosophila_rRNA_all.fa", threads=12)

All_plots <- lapply(as.list(Smry_trg_all), function(x){
                            PAC_covplot(PAC_filt, map_rRNA, 
                            summary_target = list("means_[Groups]", x), 
                            xseq=FALSE, style="line", colour="red")})

cowplot::plot_grid(All_plots[[1]][[7]], All_plots[[2]][[7]], All_plots[[3]][[7]], 
                  All_plots[[4]][[7]], All_plots[[5]][[7]], All_plots[[6]][[7]],
                  All_plots[[7]][[7]], All_plots[[8]][[7]], All_plots[[9]][[7]], 
                  All_plots[[10]][[7]], All_plots[[11]][[7]], All_plots[[12]][[7]],
                  All_plots[[13]][[7]], All_plots[[14]][[7]], All_plots[[15]][[7]],
                  nrow = 5, ncol = 3)


#-------------------------------------------------------------------------#
#' ### For mismap ###
#-------------------------------------------------------------------------#

load(file="/home/danis31/OneDrive/Programmering/Programmering/Pipelines/Drosophila/Pipeline_3.1/seqpac/dm_test_PAC.Rdata")

ref_path <- "/data/Data_analysis/Genomes/Drosophila/dm6/tRNA/tRNA.fa"
full <- Biostrings::readDNAStringSet(ref_path)
ref <- full[grepl("Glu-CTC-3-1|Lys-CTT-1-1", names(full))]


#PAC_filt <- PAC_filter(PAC_all, threshold=5, coverage=4, type="counts", stat=FALSE, pheno_target=NULL, anno_target=NULL)

map_refs <- PAC_mapper(PAC_filt, ref=ref, threads=8, mismatches=3)


ref <- "/home/danis31/Desktop/Temp_docs/fasta/GtRNAdb/trna.fa"


}
\seealso{
\url{https://github.com/Danis102} for updates on the current
  package.

Other PAC analysis: 
\code{\link{PAC_covplot}()},
\code{\link{PAC_deseq}()},
\code{\link{PAC_filter}()},
\code{\link{PAC_filtsep}()},
\code{\link{PAC_gtf}()},
\code{\link{PAC_jitter}()},
\code{\link{PAC_mismap}()},
\code{\link{PAC_nbias}()},
\code{\link{PAC_norm}()},
\code{\link{PAC_pca}()},
\code{\link{PAC_pie}()},
\code{\link{PAC_pirna}()},
\code{\link{PAC_rpm}()},
\code{\link{PAC_saturation}()},
\code{\link{PAC_sizedist}()},
\code{\link{PAC_stackbar}()},
\code{\link{PAC_summary}()},
\code{\link{PAC_trna}()},
\code{\link{map_rangetype}()}
}
\concept{PAC analysis}
