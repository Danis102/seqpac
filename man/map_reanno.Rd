% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/map_reanno.R
\name{map_reanno}
\alias{map_reanno}
\title{Aligning sequences against references using bowtie}
\usage{
map_reanno(
  PAC,
  type = "internal",
  output_path,
  ref_paths,
  mismatches = 3,
  threads = 1,
  parse_external = "-a -f",
  parse_internal = "a=TRUE, f=TRUE",
  import = "genome",
  keep_temp = FALSE
)
}
\arguments{
\item{PAC}{PAC-list object containing an Anno data.frame with sequences as
row names.}

\item{type}{Character indicating if mapping should be performed by calling
the internal bowtie function of the Rbowtie package (type="internal"), or
if bowtie should be called externally through a system call for a locally
installed bowtie (type="external").}

\item{output_path}{Character indicating the path to the destination folder
for the files generated by the function.}

\item{ref_paths}{List of file paths (character) indicating the full paths to
each fasta reference file. Importantly, carefully name each reference path.
The names will appear as they are named in the final annotation table.
Thus, if \emph{ref_paths=list(tRNA="<path_tRNA_ref>",
miRNA="<path_piRNA_ref>")} mapping to these fasta references will appear as
"tRNA" and "miRNA", respectively. Note: All reference fasta files must have
bowtie indexes using \code{Rbowtie::bowtie_build}.}

\item{mismatches}{Integer indicating the maximum number of mismatches allowed
in the alignments. The function currently supports no more than 3
mismatches (botwie max).}

\item{threads}{Integer indicating the number of parallel processes to be
used.}

\item{parse_external}{One character string specifying the additional options
parsed to externally installed bowtie when type="external". The string
follows similar rules as '...' parsing. More information on the formating
use: \code{system("bowtie --manual", intern=TRUE, ignore.stderr=FALSE)}. If
this command fails you probably do not have bowtie correctly installed. As
default parse_external= "-a -f".}

\item{parse_internal}{One character string specifying the additional options
parsed to the bowtie function in the Rbowtie package when type="internal".
The string follows similar rules as '...' parsing. See
\code{Rbowtie::bowtie} for details on the format. As default:
parse_internal= "a=TRUE, f=TRUE".}

\item{import}{Character or a list. If \code{import="genome"} mapping is done
against a reference genome and genomic coordinates are acquired. If
import="biotype", mapping is done against a specialized fasta reference
(e.g. Ensembl_ncrna, pirBase etc), where genomic coordinates is not
required because classification will be performed on a match-or-no-match
basis. A list of exactly 3 objects, named "coord", "report" and "reduce"
can also be provided. This list will be parsed to the
\code{\link{import_reanno}} function. When import="genome", the list
\code{import=list(coord=TRUE, report="full", reduce=NULL)} is automatically
parsed, while when import="biotype" the list parsed is
\code{import=list(coord=FALSE, report="full", reduce=NULL)}. Performance
increases by setting coord=FALSE. See \code{\link{import_reanno}} for more
information on how to set \code{report} and \code{reduce} for increased
performance when extremely large and repetitative references are used, such
as pirBase and repeatMasker.}

\item{keep_temp}{Logical whether or not bowtie output files temporarly stored
in the output path should be deleted. Note, this option is only used for
troubleshooting. The bowtie output files are named as the reference files
and are overwritten in each mismatch cycle. Thus, for safe saving of
mismatch 0 bowtie output make sure that \code{mismatches=0}. If not, the
mismatch 1 cycle will overwrite the botwie files.}
}
\value{
Will primarily generate .Rdata files in the destination folder
  (\code{output_path}) containing summarized information about the reference
  alignments. One file is generated for every mismatch specified in
  \emph{mismatches}. The \code{\link{make_reanno}} function can then be used
  to extract and generate annotation tables for a PAC list object. Large
  temporary bowtie input and output files will also be generated in the
  destination folder, but are removed unless \code{temp_remove=FALSE}.
}
\description{
Aligns sequences in a PAC list object against specified references generating
summarized report files in the destination folder.
}
\details{
Given a PAC object this function will extract the read sequences and align
them against single or multiple fasta reference file(s). Summarized output
will be saved as .Rdata files in the destination folder. In its default
setting the function will only report hit or no hit in up to 3 mismatches,
but this can easily be changed between 0-3 mismatches, to include alignment
coordinates and reference name extractions. Information from the .Rdata files
(Full_reanno_mis0/1/2/3.Rdata) can be extracted and added to a PAC object
using \code{make_reanno} and \code{add_reanno} functions. For increase
compatibility across platforms, the function provides both R internal bowtie
parsing (thorugh the Rbowtie package), as well as external parsing to a
locally installed version of bowtie.
}
\examples{

######################################################### 
##### Simple example for reference mapping 
##### Please see manual for simply_reanno for more advanced mapping


######################################################### 
##### Create an reanno object

##  First load a PAC- object and remove previous mapping from anno

 load(system.file("extdata", "drosophila_sRNA_pac_filt_anno.Rdata", 
                   package = "seqpac", mustWork = TRUE))
 pac$Anno <- pac$Anno[,1, drop = FALSE]
 
 
##  Then specify paths to fasta references
# If you are having problem see the vignette small RNA guide for more info.
 
 trna_path <- system.file("extdata/trna", "tRNA.fa", 
                          package = "seqpac", mustWork = TRUE)  
 rrna_path <- system.file("extdata/rrna", "rRNA.fa", 
                          package = "seqpac", mustWork = TRUE)
 
 ref_paths <- list(trna= trna_path, rrna= rrna_path)
                                    
##  Add output path of your choice.
# Here we use the R temporary folder depending on platform                                     
if(grepl("windows", .Platform$OS.type)){
 output <- paste0(tempdir(), "\\\\seqpac\\\\test")
}else{
 output <- paste0(tempdir(), "/seqpac/test")}

## Make sure it is empty (otherwise you will be prompted for a question)
out_fls  <- list.files(output, recursive=TRUE)
suppressWarnings(file.remove(paste(output, out_fls, sep="/")))

##  Then map your PAC-object against the fasta references                                  
 map_reanno(pac, ref_paths=ref_paths, output_path=output,
               type="internal", mismatches=2,  import="biotype", 
               threads=2, keep_temp=FALSE)
    
##  Then import and generate a reanno-object of the temporary bowtie-files                                    
reanno_biotype <- make_reanno(output, PAC=pac, mis_fasta_check = TRUE)                                                                                  
                                    
## Now make some search terms against reference names to create shorter names
# Theses can be used to create factors in downstream analysis
# One search hit (regular expressions) gives one new short name 
bio_search <- list(
              rrna=c("5S", "5.8S", "12S", "16S", "18S", "28S", "pre_S45"),
              trna =c("_tRNA", "mt:tRNA"))
 
 
## You can merge directly with your PAC-object by adding your original 
# PAC-object, that you used with map_reanno, to merge_pac option.
 pac <- add_reanno(reanno_biotype, bio_search=bio_search, 
                       type="biotype", bio_perfect=FALSE, 
                       mismatches = 2, merge_pac=pac)
                       
                       
## Turn your S3 list to an S4 reanno-object
class(reanno_biotype)
isS4(reanno_biotype)
names(reanno_biotype)   

reanno_s3 <- as(reanno_biotype, "list")
class(reanno_s3)
isS4(reanno_s3)   

# Turns S3 reanno object into a S4                                    
reanno_s4 <- as.reanno(reanno_s3)
class(reanno_s4)
isS4(reanno_s4) 
 
# Similar, turns S3 PAC object into a S4
class(pac)
isS4(pac)  
                                                                        
pac_s4 <- as.PAC(pac)
class(pac_s4)
isS4(pac_s4)   

# Don't forget that in the slots of S4 lies regular S3 objects. Thus,
# to receive these tables from an S4  you need to combine both S4 and S3
# receivers:

pac_s4 <- PAC_norm(pac_s4, norm = "cpm")
pac_s4 <- PAC_summary(pac_s4, norm = "cpm", type = "means", 
                   pheno_target=list("stage"), merge_pac=TRUE)

pac_s4 
head(pac_s4@norm$cpm)
head(pac_s4@summary$cpmMeans_stage)



############################################################################ 
## Similarly you can use Bowtie indexed genome fasta references
## But don't forget to use import="genome" for coordinate import
#   
# ref_paths <- list(genome="<path_to_bowtie_indexed_fasta>")
# 
# ## Path to output folder:
# output_genome <- "<your_path_to_output>"
#
### Run map_reanno 
# map_reanno(PAC=pac, ref_paths=ref_paths, output_path=output_genome, 
#           type="internal", mismatches=3, import="genome", 
#           threads=8, keep_temp=TRUE)
#
#
#
####################################################
#### The trick to succeed with bio_perfect=TRUE 

## Run add_reanno with bio_perfect="FALSE" (look where "Other=XX" occurs)

anno <- add_reanno(reanno_biotype, bio_search=bio_search, type="biotype", 
                   bio_perfect=FALSE, mismatches = 0)

## Find sequences that has been classified as other 
other_seqs  <- anno[grepl("other", anno$mis0),]$seq
tab <- reanno_biotype@Full_anno$mis0$trna
tab[tab$seq \%in\% other_seqs,]         #No other hit in trna

tab <- reanno_biotype@Full_anno$mis0$rrna
tab[tab$seq \%in\% other_seqs,] 


## Add a search terms that catches the other rrna 
bio_search <- list(
              rrna=c("5S", "5.8S", "12S", "16S", 
                     "18S", "28S", "pre_S45", "Other_"),
              trna =c("_tRNA", "mt:tRNA"))
                
anno <- add_reanno(reanno_biotype, bio_search=bio_search, 
                   type="biotype", bio_perfect=FALSE, mismatches = 0)

## Repeat search until no "Other" appear when running add_reanno, 
## then run  bio_perfect=TRUE: 

anno <- add_reanno(reanno_biotype, bio_search=bio_search,  
                   type="biotype", bio_perfect=TRUE, mismatches = 0)
                   



}
\seealso{
\url{http://bowtie-bio.sourceforge.net/index.shtml} for information
  about Bowtie and for Rbowtie:
  \url{https://www.bioconductor.org/packages/release/bioc/html/Rbowtie.html}.
  \url{https://github.com/Danis102} for updates on the current package.

Other PAC reannotation: 
\code{\link{add_reanno}()},
\code{\link{as.reanno}()},
\code{\link{check_reanno}()},
\code{\link{import_reanno}()},
\code{\link{make_conv}()},
\code{\link{make_reanno}()},
\code{\link{simplify_reanno}()}
}
\concept{PAC reannotation}
