% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_reanno.R
\name{make_reanno}
\alias{make_reanno}
\title{Makes annotation from R imported reannotation mapping}
\usage{
make_reanno(reanno_path, PAC, mis_fasta_check = FALSE)
}
\arguments{
\item{reanno_path}{Path to a directory where reannotation .Rdata files can be
found.}

\item{PAC}{PAC-list object containing an Anno data.frame with sequences as
row names.}

\item{mis_fasta_check}{Logical TRUE/FALSE if checking against anno_misX.fa
should be done. The anno_misX.fa is the fasta file generated by the
map_reanno function after completing the last mismatch cycle. This file
contains all PAC sequences that failed to receive an alignment in any of
fasta references and after all mismatch cycles. This file should by
availble in the same folder as the output files generated in the
map_reanno function (=reanno_path).}
}
\value{
List of dataframes with additional information from reannotation
  using bowtie. If \emph{mis_fasta_check} is specified the function will look
  for a \emph{anno_misX.fa} (X = the file with the highest number) previoulsy
  generated by the reannotation workflow. This file is used to double check
  so that no sequences are missing before and after reannotation.
}
\description{
\code{make_reanno} makes a reannotation list.
}
\details{
Given the path to the R reannotation files (reanno_mis0/1/2/3/4/5.Rdata)
generated by \code{\link{map_reanno}}, this function will summarize the
reannotation files into one output that matches the order of sequences in a
PAC object.
}
\examples{

######################################################### 
##### Example type = "internal" for genome alignment #### 
#
# library(seqpac)
# load(system.file("extdata", "drosophila_sRNA_pac_filt.Rdata", package = "seqpac", mustWork = TRUE))
# pac <- pac_cpm_filt
# 
# ## Path to bowtie indexed reference genome fasta 
# ref_paths <- list(genome="/data/Data_analysis/Genomes/Drosophila/dm6/Ensembl/dm6_ensembl_release_101/fasta/chr/fast_chr.fa")
# 
# ## Path to output folder:
# output_genome <- "/home/danis31/Desktop/Temp_docs/reanno_genome"
# 
# ## Run map_reanno internally for genome mapping
# map_reanno(PAC=pac, ref_paths=ref_paths, output_path=output_genome, 
#            type="internal", mismatches=3, import="genome", threads=1, keep_temp=TRUE)
# 
# ## Subsequent reannotion workflow for genome
# reanno <- make_reanno(reanno_path=output_genome, PAC=pac, mis_fasta_check = TRUE)
# pac <- add_reanno(reanno=reanno, mismatches = 3,  merge_pac=pac, type = "genome", genome_max = 10)
#   
############################################################################ 
##### Example type= external for biotype classification with 0 mismatch #### 
#
# ## Path to bowtie indexed fasta references   
# ref_paths <- list(miRNA="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/miRNA/miRBase_21-dme.fa",
#                   Ensembl="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/Ensembl/Drosophila_melanogaster.BDGP6.ncrna.fa",
#                   rRNA="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/rRNA_reanno/drosophila_rRNA_all.fa",
#                   tRNA="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/tRNA_reanno/tRNA_mature.fa",
#                   piRNA="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/piRNA_piRBase/piR_dme.fa")
# 
# ## Path to output folder:
# output_bio <- "/home/danis31/Desktop/Temp_docs/reanno_biotype"
# 
# ## Run map_reanno for biotype classification
# map_reanno(pac, ref_paths=ref_paths, output_path=output_bio, 
#            type="external", mismatches=0,  import="biotype", threads=1)
#
# ## Subsequent reannotion workflow for sequence classification
# bio_search <- list(
#                 miRNA="dme-",
#                 Ensembl =c("lincRNA", "miRNA", "pre_miRNA", "rRNA", "snoRNA", 
#                           "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
#                           "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
#                           "snmRNA", "snoRNA", "snRNA","Su\\(Ste\\)"),
#                 rRNA    =c("5.8S", "28S", "18S"),
#                 tRNA    =c("^tRNA", "MT"),
#                 piRNA   =c("piR-"))
#                 
# reanno <- make_reanno(reanno_path=output_bio, PAC=pac, mis_fasta_check = TRUE)
# pac <- add_reanno(reanno, merge_pac=pac, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 0)
# 
# head(pac$Anno)
#
# ## Merge with PAC object
# pac_master <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 3, merge_pac=pac_master) 
# head(pac_master$Anno)
# 
# 
# 
# ####################################################
# #### The trick to succeed with bio_perfect=TRUE ####
# 
# ## Run add_reanno with bio_perfect="FALSE" (look where "Other=XX" occurs)
#
# bio_search <- list(
#                 miRNA="dme-",
#                 Ensembl =c("miRNA", "pre_miRNA", "rRNA", "snoRNA", 
#                           "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
#                           "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
#                           "snmRNA", "snoRNA", "snRNA","Su\\(Ste\\)"),
#                 rRNA    =c("5.8S", "28S", "18S", "rRNA"),
#                 tRNA    =c("^tRNA"),
#                 piRNA   =c("piR-"))
# 
# anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 0)
# 
# ## Find sequences that has been classified as other 
# other_seqs  <- anno[grepl("other", anno$mis0_bio),]$seq_bio
# tab <- reanno$Full_anno$mis0$Ensembl
# tab[tab$seq \%in\% other_seqs,]         # lincRNA don't have a search term
# 
# 
# ## Add a search terms that catches all lincRNA 
# 
# bio_search <- list(
#                 miRNA="dme-",
#                 Ensembl =c("lincRNA", "miRNA", "pre_miRNA", "rRNA", "snoRNA", 
#                           "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
#                           "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
#                           "snmRNA", "snoRNA", "snRNA","Su\\(Ste\\)"),
#                 rRNA    =c("5.8S", "28S", "18S", "rRNA"),
#                 tRNA    =c("^tRNA"),
#                 piRNA   =c("piR-"))
#                 
# anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 0)
# 
# ## Repeat search until no "Other" appear when running add_reanno, then run  bio_perfect=TRUE: 
# 
# anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=TRUE, mismatches = 0)

}
\seealso{
\url{http://bowtie-bio.sourceforge.net/index.shtml} for information about
  Bowtie \url{https://github.com/Danis102} for updates on the current
  package.

Other PAC reannotation: 
\code{\link{add_reanno}()},
\code{\link{check_reanno}()},
\code{\link{import_reanno}()},
\code{\link{map_reanno}()},
\code{\link{simplify_reanno}()}
}
\concept{PAC reannotation}
