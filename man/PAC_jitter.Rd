% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PAC_jitter.R
\name{PAC_jitter}
\alias{PAC_jitter}
\title{Plots jitter plot from PAC object}
\usage{
PAC_jitter(
  PAC,
  summary_target = NULL,
  anno_target = NULL,
  type = "jitter",
  limits = NULL,
  ypos_n = NULL,
  colvec = NULL,
  box = TRUE
)
}
\arguments{
\item{summary_target}{List with: 1st object being a character vector of the
target dataframe in summary and 2nd object being a character vector of the
target column(s) in that dataframe. In case of input being a dataframe,
summary_target can be a character vector indicating the column with the
summarized data.}

\item{anno_target}{Character vector with the name of the target column in
Anno or the name of the annotation column in case of input being a dataframe.}

\item{limits}{Integer vector with the y-limits to be parsed to ggplot2.}

\item{ypos_n}{Integer setting the y position of the n counts to be parsed to
ggplot2.}

\item{input}{PAC list-object containing Anno and a summary list-folder with
summarized dataframe(s) for example generated by PAC_summary. The function
can also be applied on a dataframe containing a column with annotation
groupings (e.g. biotype) and a column with summarized data (e.g. log2 fold
changes). Rows should be unique sequences as the rownames of a PAC summary
object.}

\item{colors}{Character vector with color codes to be parsed to ggplot2.}
}
\value{
A plot-list object with jitter plots generated by ggplot2.
}
\description{
\code{PAC_jitter} Plots a jitter plot using the information in the Anno and
Counts tables in a PAC object.
}
\details{
Given a PAC object with grouped summaries  the function will use column(s) in the Anno object to group
the Counts table by row and then plot a jitter plot based on
}
\examples{

library(seqpac)
load("/home/danis31/OneDrive/Programmering/Programmering/Pipelines/Drosophila/Pipeline_3.1/seqpac/dm_test_PAC.Rdata")

PAC_filt <- PAC_rpm(PAC_filt)

PAC_filt <- PAC_summary(PAC=PAC_filt, norm = "rpm", type = "log2FC", pheno_target=list("Method"))
PAC_filt <- PAC_summary(PAC=PAC_filt, norm = "rpm", type = "percentgrand", pheno_target=list("Method"))


hierarchy <- list( Mt_rRNA= "12S|16S|Mt_rRNA",
                rRNA="5S|5.8S|18S|28S|S45|Ensembl_rRNA|rRNA_Other",
                Mt_tRNA= "tRNA_mt-tRNA",
               tRNA="Ensembl_tRNA|tRNA_nuc-tRNA",
               miRNA="^miRNA|Ensembl_miRNA|Ensembl_pre_miRNA",
               piRNA="piRNA")

PAC_filt <- simplify_reanno(PAC_filt, hierarchy=hierarchy, mismatches=0, bio_name="Biotypes_mis0", PAC_merge=TRUE)


plots_FC <- PAC_jitter(PAC_filt, summary_target=list("Log2FC_Method"), anno_target=list("Biotypes_mis0"))
plots_FCgrand <- PAC_jitter(PAC_filt, summary_target=list("Percdiffgrand_Method"), anno_target=list("Biotypes_mis0"))


plots_FC[[1]]
cowplot::plot_grid(plotlist=plots_FCgrand[1:9],nrow = 3, ncol = 3)

}
\seealso{
\url{https://github.com/Danis102} for updates on the current
  package.

Other PAC analysis: 
\code{\link{PAC_covplot}()},
\code{\link{PAC_deseq}()},
\code{\link{PAC_filter}()},
\code{\link{PAC_filtsep}()},
\code{\link{PAC_gtf}()},
\code{\link{PAC_mapper}()},
\code{\link{PAC_mismap}()},
\code{\link{PAC_nbias}()},
\code{\link{PAC_norm}()},
\code{\link{PAC_pca}()},
\code{\link{PAC_pie}()},
\code{\link{PAC_rpm}()},
\code{\link{PAC_saturation}()},
\code{\link{PAC_sizedist}()},
\code{\link{PAC_stackbar}()},
\code{\link{PAC_summary}()},
\code{\link{PAC_tRNA}()},
\code{\link{map_rangetype}()}
}
\concept{PAC analysis}
