% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simplify_reanno.R
\name{simplify_reanno}
\alias{simplify_reanno}
\title{Generates one-hit hierarchial biotype annotation}
\usage{
simplify_reanno(
  input,
  hierarchy,
  mismatches = 2,
  bio_name = "Biotypes",
  merge_pac = FALSE,
  target_columns = NULL
)
}
\arguments{
\item{input}{Data.frame with biotype/mismatch matrix generated by
\code{add_reanno}. A PAC-list object can also be provided here where the
Anno data.frame will be used as input. Important, PAC objects need biotype
columns generated by \code{\link{add_reanno}}.}

\item{hierarchy}{List with character vectors. The vectors search terms
constructed as regular expressions that will be parsed to grepl() and
searched for in the mismatch biotype reannotation matrix (colnames:
mis0_bio, mis1_bio, mis2_bio, mis3_bio). Important \emph{hierarchy} is order
sensitive. For example if \emph{hierarchy} is defined as list(rRNA="rRNA",
miRNA="miRNA", piRNA="piRNA") a sequence annotated with 0 mismatches for all
three biotypes will only be reported as rRNA since this biotype was put
first in the list. Sequences annotated to neither of the biotypes listed in
\emph{hierarchy} but still is annotated to something will be asigned as
"other". Sequences without an annotation down to the specified mismatch
level (\code{mismatches} will be asigned as "no_anno".}

\item{mismatches}{Integer indicating the number of allowed mismatches. Note
that this value can never be larger than the maximum number of mismatches
used in the reannotation workflow (default=0).}

\item{bio_name}{Character naming the final biotype column (default="Biotype")}

\item{merge_pac}{Logical whether the simplified annotation column should
automatically be added to the Anno object if a PAC list object were given as
input (default=FALSE).}

\item{target_columns}{Character vector naming the target columns for the
reannotation matrix. When \code{target_columns=NULL}(default), then the
function assumes that one (and only one) reannotation matrix for biotypes
generatated by \code{\link{add_reanno}} is present in PAC$Anno (colnames =
mis0_bio, mis1_bio, mis2_bio etc). With \code{target_columns} two
alternative reannotation matrixes can be discriminated.}
}
\value{
Character vector with single best-hit biotypes with fewest mismatches.
}
\description{
\code{simplify_reanno} adds hierarchical classification to PAC.
}
\details{
This function deals with and can be used to explores the effect of
multimapping. Given a biotype reannotation matrix (colnames = mis0_bio,
mis1_bio, mis2_bio etc) created by \code{\link{add_reanno}} and usually added
to the Anno data.frame of a PAC object, the function will generated a one-hit
biotype vector according to a user-defined biotype hierarchy.
}
\examples{
#' ######################################################### 
##### hierarchical classification uning simplify_reanno

##  First load a PAC- object

 load(system.file("extdata", "drosophila_sRNA_pac_filt_anno.Rdata", 
                   package = "seqpac", mustWork = TRUE))
 pac$Anno <- pac$Anno[,1, drop = FALSE]
 
 
##  Then specify paths to fasta references for creating a reanno object
# If you are having problem see the vignette small RNA guide for more info.
 
 trna_path <- system.file("extdata/trna", "tRNA.fa", 
                          package = "seqpac", mustWork = TRUE)  
 rrna_path <- system.file("extdata/rrna", "rRNA.fa", 
                          package = "seqpac", mustWork = TRUE)
 
 ref_paths <- list(trna= trna_path, rrna= rrna_path)
                                    
##  Add output path of your choice.
# Here we use the R temporary folder depending on platform
# (only needed for autonomous examples)                                     
 if(grepl("windows", .Platform$OS.type)){
 output <- paste0(tempdir(), "\\\\seqpac\\\\test")
 }else{
 output <- paste0(tempdir(), "/seqpac/test")}
 out_fls  <- list.files(output, recursive=TRUE)
 suppressWarnings(file.remove(paste(output, out_fls, sep="/")))

##  Then map your PAC-object against the fasta references                                  
 map_reanno(pac, ref_paths=ref_paths, output_path=output,
               type="internal", mismatches=2,  import="biotype", 
               threads=2, keep_temp=FALSE)
    
##  Then import and generate a reanno-object of the temporary bowtie-files                                    
reanno_biotype <- make_reanno(output, PAC=pac, mis_fasta_check = TRUE)                                                                                  
                                    
## Now make some search terms against reference names to create shorter names
# Theses can be used to create factors in downstream analysis
# One search hit (regular expressions) gives one new short name 
bio_search <- list(
              rrna=c("5S", "5.8S", "12S", "16S", "18S", "28S", "pre_S45"),
              trna =c("_tRNA", "mt:tRNA"))
 
 
## You can merge directly with your PAC-object by adding your original 
# PAC-object, that you used with map_reanno, to merge_pac option.
 pac <- add_reanno(reanno_biotype, bio_search=bio_search, 
                       type="biotype", bio_perfect=FALSE, 
                       mismatches = 2, merge_pac=pac)
                       
## Hierarchical classification with simplify_reanno
table(pac$Anno$mis0_bio)
table(pac$Anno$mis2_bio)

# Setup hierarchy(rRNA prioritized before tRNA) 
hierarchy_1 <- list(rRNA="rrna_",
                  tRNA="trna_")

# Setup hierarchy(specifies the hierarchy among rRNA)                  
hierarchy_2 <- list(r18S="rrna_18S",
                    r28S="rrna_28S",
                    r5.8S="rrna_5.8S",
                    r5S="rrna_5S",
                    pre45S="pre_S45",
                    other_rrna="rrna_other")                 

# No mistmach for hierarchy_1:
test1 <- simplify_reanno(input=pac, hierarchy=hierarchy_1, mismatches=0, 
                      bio_name="Biotypes_mis0", merge_pac=FALSE)
                      
# Up to 2 mistmaches for rRNA hierarchy_2                      
test2 <- simplify_reanno(input=pac, hierarchy=hierarchy_2, mismatches=2, 
                      bio_name="rRNA_biotypes_mis2", merge_pac=FALSE)                   
                      
                      
table(test1$Biotypes_mis0) 
table(test2$rRNA_biotypes_mis2)
                     
# You can add the new column to your PAC-object using merge_pac=TRUE:
pac <- simplify_reanno(input=pac, hierarchy=hierarchy_2, mismatches=2, 
                      bio_name="rRNA_biotypes_mis2", merge_pac=TRUE)
                      
head(pac$Anno)                                             
                       
## Turn your S3 list to an S4 reanno-object
class(reanno_biotype)
isS4(reanno_biotype)
names(reanno_biotype)   

reanno_s3 <- as(reanno_biotype, "list")
class(reanno_s3)
isS4(reanno_s3)   

# Turns S3 reanno object into a S4                                    
reanno_s4 <- as.reanno(reanno_s3)
class(reanno_s4)
isS4(reanno_s4) 
 
# Similar, turns S3 PAC object into a S4
class(pac)
isS4(pac)  
                                                                        
pac_s4 <- as.PAC(pac)
class(pac_s4)
isS4(pac_s4)   


\dontrun{

##--------------------------------------------------------------------------#
## Advanced examples for reanno mapping
## Please see manuals for map_reanno, make reanno, add_reanno for 
## simple examples
##--------------------------------------------------------------------------#

# Read and prepared PAC object:
 load(system.file("extdata", "drosophila_sRNA_pac_filt_anno.Rdata", 
                   package = "seqpac", mustWork = TRUE))
 pac$Anno <- pac$Anno[,1, drop = FALSE]

##--------------------------------------------------------------------------#
## Example biotype classification allowing 1 mismatch
##--------------------------------------------------------------------------#

# Path to bowtie indexed fasta references:   
ref_paths <- list(miRNA="/some/path/to/miRNA.fa",
                  Ensembl="/some/path/to/ensembl.ncrna.fa",
                  rRNA="/some/path/to/rRNA.fa",
                  tRNA="/some/path/to/tRNA.fa",
                  piRNA="/some/path/to/piRNA.fa")

# Path to output folder:
output_bio <- "/some/path/to/output_folder/"

# Run map_reanno for biotype classification:
map_reanno(pac, ref_paths=ref_paths, output_path=output_bio, 
           type="external", mismatches=1,  import="biotype")

# Import map_reanno output into a reanno-object using make_reanno:
reanno <- make_reanno(reanno_path=output_bio, PAC=pac, mis_fasta_check = TRUE)
names(reanno)
names(reanno$Full_anno)


# Make search terms (regular expressions) where hits create annotations:  
bio_search <- list(
                miRNA="dme-",
                Ensembl =c("lincRNA", "miRNA", "pre_miRNA", "rRNA", "snoRNA", 
                          "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
                          "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
                          "snmRNA", "snoRNA", "snRNA","Su\\\\(Ste\\\\)"),
                rRNA    =c("5.8S", "28S", "18S"),
                tRNA    =c("^tRNA", "MT"),
                piRNA   =c("piR-"))

# Classify by search term using add_reanno:
pac <- add_reanno(reanno, merge_pac=pac, bio_search=bio_search, 
                  type="biotype", bio_perfect=FALSE, mismatches = 1)
head(pac$Anno)           # Note: two misX_bio ("mis0_bio" and "mis1_bio")
table(pac$Anno$mis0_bio) # Annotations with 0 mismatches



##--------------------------------------------------------------------------#
## The trick to succeed with bio_perfect=TRUE
##--------------------------------------------------------------------------#

# Run add_reanno with bio_perfect="FALSE" (look where "Other=XX" occur):
bio_search <- list(
                miRNA="dme-",
                Ensembl =c("miRNA", "pre_miRNA", "rRNA", "snoRNA", 
                          "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
                          "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
                          "snmRNA", "snoRNA", "snRNA","Su\\\\(Ste\\\\)"),
                rRNA    =c("5.8S", "28S", "18S", "rRNA"),
                tRNA    =c("^tRNA"),
                piRNA   =c("piR-"))

anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", 
                   bio_perfect=FALSE, mismatches = 1)

# Find sequences that has been classified as other: 
other_seqs  <- anno[grepl("other", anno$mis0_bio),]$seq_bio
tab <- reanno$Full_anno$mis0$Ensembl
tab[tab$seq \%in\% other_seqs,]         # lincRNA don't have a search term


# Add a search terms that catches all lincRNA: 
bio_search <- list(
                miRNA="dme-",
                Ensembl =c("lincRNA", "miRNA", "pre_miRNA", "rRNA", "snoRNA", 
                          "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
                          "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
                          "snmRNA", "snoRNA", "snRNA","Su\\\\(Ste\\\\)"),
                rRNA    =c("5.8S", "28S", "18S", "rRNA"),
                tRNA    =c("^tRNA"),
                piRNA   =c("piR-"))
                
anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", 
                   bio_perfect=FALSE, mismatches = 1)

# Repeat search until no "Other" appear, then run  bio_perfect=TRUE: 
anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", 
                   bio_perfect=TRUE, mismatches = 1)


##--------------------------------------------------------------------------#
## Hierarchical classification with simplify_reanno
##--------------------------------------------------------------------------#
table(pac$Anno$mis0_bio)

# Setup hierarchy 
hierarchy <- list( rRNA="Ensembl_rRNA|rRNA_other|rRNA_5.8S|rRNA_28S|rRNA_18S",
                   Mt_tRNA="tRNA:MT",
                   tRNA="Ensembl_tRNA|tRNA__tRNA",
                   miRNA ="^miRNA|Ensembl_miRNA|Ensembl_pre_miRNA",
                   snoRNA="Ensembl_snoRNA",
                   lncRNA="Ensembl_lincRNA",
                   piRNA="piRNA"   
                  )

# No mistmach allowed
pac <- simplify_reanno(input=pac, hierarchy=hierarchy, mismatches=0, 
                      bio_name="Biotypes_mis0", merge_pac=TRUE)

# Up to 1 mismatches allowed
pac <- simplify_reanno(input=pac, hierarchy=hierarchy, mismatches=1, 
                       bio_name="Biotypes_mis1", merge_pac=TRUE)

}


}
\seealso{
\url{http://bowtie-bio.sourceforge.net/index.shtml} for information about
 Bowtie \url{https://github.com/Danis102} for updates on the current package.

Other PAC reannotation: 
\code{\link{add_reanno}()},
\code{\link{as.reanno}()},
\code{\link{check_reanno}()},
\code{\link{import_reanno}()},
\code{\link{make_conv}()},
\code{\link{make_reanno}()},
\code{\link{map_reanno}()}
}
\concept{PAC reannotation}
