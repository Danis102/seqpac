% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_cutadapt.R
\name{make_cutadapt}
\alias{make_cutadapt}
\title{Trims/filter fastq using external cutadapt/fastq_quality_filter}
\usage{
make_cutadapt(input, output, parse = NULL, threads = 1)
}
\arguments{
\item{input}{Character path to a directory the output directory where trimmed
fastq files will be stored and temporary files will be generated.}

\item{parse}{List with two character string expressions. The first will be
parsed to cutadapt while the other is be parsed to fastq_quality_filter. If
any is NULL, then no make_cutadapt will pass the command and the trimming
or filtering will not be applied. Thus, if parse = list(cutadapt=NULL,
fastq_quality_filter="-q 20 -p 80"), then only the quality filter will be
applied, and vice versa.}

\item{threads}{Integer stating the number of parallell jobs. Note, that
reading multiple fastq files drains memory fast, using up to 10Gb per fastq
file. To avoid crashing the system due to memory shortage, make sure that
each thread on the machine have at least 10 Gb of memory availabe, unless
your fastq files are very small. Use \code{parallel::detectcores()} to see
available threads on the machine.}
}
\value{
Externally the function will generate trimmed and/or quality filtered fastq
files in the output folder. Internally, a list of logs that can be used to
generate a progress report is returned.
}
\description{
\code{make_trim} cutadapt/fastq_quality_filter
}
\details{
Given a path to sequence files in fastq format this function will trim adaptor
and remove sequences with low quality.
}
\examples{
 
library(seqpac)
  
############################################################      
### Seqpac trimming using the make_cutadapt function
### (Important: Needs an external installations of cutadapt and fastq_quality_filter) 

 input = system.file("extdata", package = "seqpac", mustWork = TRUE)
 output =  "/home/danis31/Desktop/Temp_docs/temp"
 
 
 # Parse for make_cutadapt is a list of 2 character string expressions.
 # The first is parsed to cutadapt and the other to fastq_quality_filter 
 # For parallel processes '-j 1' is recommended since seqpac will   
 # parallelize across samples and not within.
 # Run system("cutadapt -h") and system("fastq_quality_filter -h") for more options.
 
 parse = list(
           cutadapt="-j 1 -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCACAT --discard-untrimmed --nextseq-trim=20 -O 10 -m 7 -M 70",
           fastq_quality_filter="-q 20 -p 80")
              
            
 logs  <-  make_cutadapt(input, output, threads=6, parse=parse)
                     
                     
                     
                     
parse = list(cutadapt="-j 1 -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCACAT --discard-untrimmed --nextseq-trim=20 -O 10 -m 7 -M 70",
              fastq_quality_filter="-q 20 -p 80") 
 
 
}
\seealso{
\url{https://cutadapt.readthedocs.io/en/stable/} for download and
  documentation on cutadapt. 
  \url{http://hannonlab.cshl.edu/fastx_toolkit/commandline.html} for download and
  documentation on fastq_quality_filter.#'   
  \url{https://github.com/Danis102} for updates on seqpac.

Other PAC generation: 
\code{\link{import_sports}()},
\code{\link{make_PAC}()},
\code{\link{make_anno}()},
\code{\link{make_counts_dep}()},
\code{\link{make_counts}()},
\code{\link{make_pheno}()},
\code{\link{make_trim}()},
\code{\link{progress_report}()}
}
\concept{PAC generation}
