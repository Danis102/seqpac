% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_reanno.R
\name{add_reanno}
\alias{add_reanno}
\title{Generates biotype annotation from reannotation object}
\usage{
add_reanno(
  reanno,
  mismatches = 0,
  type = "genome",
  bio_search,
  bio_perfect = FALSE,
  genome_max = 10,
  merge_pac = NULL
)
}
\arguments{
\item{reanno}{A reannotation list object generated by \code{\link{make_reanno}}, with
an Overview data.frame and a Full_anno list.}

\item{mismatches}{Integer indicating the number of mismatches that should be
reported. Can never have a higher number than was originally specified with
the \\code{\link{map_reanno}} function. While default=0, reporting the maximum
number is recommended. Note, that the mismatch information is only added to
the report. Further classification can be generated with the
\code{\link{simplify_reanno}} function.}

\item{type}{Character indicating what type of classification. If
type="genome", the reanno object is expected to have genome coordinates as
controlled by  \code{\link{map_reanno}} and the  \code{\link{import_reanno}} functions. Here
all hits will be reported. If type="biotype", then coordinates are not
expected. Reference hits will instead be classified according to the biotype
search terms in \code{bio_search}.}

\item{bio_search}{List of character vectors indicating search terms targeting
feature names in the original reference fasta files. These search terms
will be parsed to \code{\link{grepl}} as regular expressions. List names must
match names of the references in the reanno object. Classifications will
be reported with reference name + search term (e.g. "Ensembl_trna").}

\item{bio_perfect}{Logical whether the function should allow that not all
hits against the references must have a unique bio_search term. If
perfect=FALSE (default) all references hits that was not caught by a search
term will be annotated as reference + other (e.g. "Ensembl_other"). In case
perfect=TRUE, if the search terms do not catch all reference hits the
function will through an error. Can be used to ensure that all hits receive
a classification.}

\item{genome_max}{Integer or character indicating the number of maximum
coordinates to be reported when type="genome". If the number of hits
exceedes \code{genome_max} it will be indicated in the classification and
only the first hits up to \code{max_hits} will be reported. Useful to
handling seaquences that multimap. If genome_max="all", all coordinates
will be reported which may dramatically affect performance. (default=10)}

\item{merge_pac}{PAC object. If a PAC object is provided in merge_pac, then
the function will automatically merge the Anno table of the PAC object with
the newly generated annotations. As default, merge_pac=NULL that will return
a tibble data.frame instead.}
}
\value{
Dataframe with mismatch and coordinate or biotype information (search
  term hits) that can directly be added to an Anno data.frame of a PAC
  object, given that the PAC object was used in the reannotation workflow.
  Annotations can be further simplifide using the
  \code{\link{symplify_reanno}} function.
}
\description{
\code{add_reanno} adds biotypes from reannotation to PAC.
}
\details{
Given a reanno object generated by \code{\link{make_reanno}} this function will
either extract genome coordinates or classify biotypes using a list of search
terms (see details). Information will be compiled into a dataframe with the
same order of sequences as in the original PAC master file.
}
\examples{

######################################################## 
#### Example type = "internal" for genome alignment #### 

library(seqpac)
load(system.file("extdata", "drosophila_sRNA_pac_filt.Rdata", package = "seqpac", mustWork = TRUE))
pac <- pac_cpm_filt

## Path to bowtie indexed reference genome fasta 
ref_paths <- list(genome="/data/Data_analysis/Genomes/Drosophila/dm6/Ensembl/dm6_ensembl_release_101/fasta/chr/fast_chr.fa")

## Path to output folder:
output_genome <- "/home/danis31/Desktop/Temp_docs/reanno_genome"

## Run map_reanno internally for genome mapping
map_reanno(PAC=pac, ref_paths=ref_paths, output_path=output_genome, 
           type="internal", mismatches=3, import="genome", threads=8, keep_temp=TRUE)

## Subsequent reannotion workflow for genome
reanno <- make_reanno(reanno_path=output_genome, PAC=pac, mis_fasta_check = TRUE)
pac <- add_reanno(reanno=reanno, mismatches = 3,  merge_pac=pac, type = "genome", genome_max = 10)
  
########################################################################### 
#### Example type= external for biotype classification with 0 mismatch #### 

## Path to bowtie indexed fasta references   
ref_paths <- list(miRNA="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/miRNA/miRBase_21-dme.fa",
                  Ensembl="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/Ensembl/Drosophila_melanogaster.BDGP6.ncrna.fa",
                  rRNA="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/rRNA_reanno/drosophila_rRNA_all.fa",
                  tRNA="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/tRNA_reanno/tRNA_mature.fa",
                  piRNA="/data/Data_analysis/Genomes/Drosophila/dm6/sports/Drosophila_melanogaster/piRNA_piRBase/piR_dme.fa")

## Path to output folder:
output_bio <- "/home/danis31/Desktop/Temp_docs/reanno_biotype"

## Run map_reanno for biotype classification
map_reanno(pac, ref_paths=ref_paths, output_path=output_bio, 
           type="external", mismatches=0,  import="biotype", threads=8)

## Subsequent reannotion workflow for sequence classification
bio_search <- list(
                miRNA="dme-",
                Ensembl =c("lincRNA", "miRNA", "pre_miRNA", "rRNA", "snoRNA", 
                          "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
                          "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
                          "snmRNA", "snoRNA", "snRNA","Su\\\\(Ste\\\\)"),
                rRNA    =c("5.8S", "28S", "18S"),
                tRNA    =c("^tRNA", "MT"),
                piRNA   =c("piR-"))
                
reanno <- make_reanno(reanno_path=output_bio, PAC=pac, mis_fasta_check = TRUE)
pac <- add_reanno(reanno, merge_pac=pac, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 0)

head(pac$Anno)

## Merge with PAC object
pac_master <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 3, merge_pac=pac_master) 
head(pac_master$Anno)



####################################################
#### The trick to succeed with bio_perfect=TRUE ####

## Run add_reanno with bio_perfect="FALSE" (look where "Other=XX" occurs)

bio_search <- list(
                miRNA="dme-",
                Ensembl =c("miRNA", "pre_miRNA", "rRNA", "snoRNA", 
                          "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
                          "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
                          "snmRNA", "snoRNA", "snRNA","Su\\\\(Ste\\\\)"),
                rRNA    =c("5.8S", "28S", "18S", "rRNA"),
                tRNA    =c("^tRNA"),
                piRNA   =c("piR-"))

anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 0)

## Find sequences that has been classified as other 
other_seqs  <- anno[grepl("other", anno$mis0_bio),]$seq_bio
tab <- reanno$Full_anno$mis0$Ensembl
tab[tab$seq \%in\% other_seqs,]         # lincRNA don't have a search term


## Add a search terms that catches all lincRNA 

bio_search <- list(
                miRNA="dme-",
                Ensembl =c("lincRNA", "miRNA", "pre_miRNA", "rRNA", "snoRNA", 
                          "snRNA", "tRNA", "Uhg", "7SLRNA", "asRNA", "hpRNA", 
                          "RNaseMRP","RNaseP", "sbRNA", "scaRNA", "sisRNA", 
                          "snmRNA", "snoRNA", "snRNA","Su\\\\(Ste\\\\)"),
                rRNA    =c("5.8S", "28S", "18S", "rRNA"),
                tRNA    =c("^tRNA"),
                piRNA   =c("piR-"))
                
anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 0)

## Repeat search until no "Other" appear when running add_reanno, then run  bio_perfect=TRUE: 

anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=TRUE, mismatches = 0)

}
\seealso{
\url{http://bowtie-bio.sourceforge.net/index.shtml} for information
 about Bowtie and \url{https://github.com/Danis102} for updates on the
 current package.

Other PAC reannotation: 
\code{\link{check_reanno}()},
\code{\link{import_reanno}()},
\code{\link{make_reanno}()},
\code{\link{map_reanno}()},
\code{\link{simplify_reanno}()}
}
\concept{PAC reannotation}
