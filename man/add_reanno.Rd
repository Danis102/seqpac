% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_reanno.R
\name{add_reanno}
\alias{add_reanno}
\title{Generates biotype annotation from reannotation object}
\usage{
add_reanno(
  reanno,
  mismatches = 0,
  type = "genome",
  bio_search,
  bio_perfect = FALSE,
  genome_max = 10,
  merge_pac = NULL
)
}
\arguments{
\item{reanno}{A reannotation list object generated by \code{make_reanno}, with
an Overview dataframe and a Full_anno list.}

\item{mismatches}{Integer indicating the number of mismatches that should be
reported. Can never have a higher number than was originally used in the
reannotation workflow. While default=0, reporting the maximum number is
recommended. The mismatch information is only added to the report, not
exchanging annotation hits with fewer mismatches.}

\item{type}{Character indicating what type of classification. If
type="genome", the reanno object is expected to have genome coordinates as
controlled by \code{map_reanno} and the \code{import_reanno} functions.
Here all hits will be reported. If type="biotype", then coordinates are not
expected. Reference hits will instead be classified according to the biotype
search terms in \code{bio_search}.}

\item{bio_search}{List of character vectors indicating search terms targeting
feature names in the original reference fasta files. These search terms
will be parsed to \code{grepl} as regular expressions. List names must
match names of the references in the reanno object. Classifications will
be reported with reference name + search term (e.g. "Ensembl_mt:trna").}

\item{bio_perfect}{Logical whether the function should allow that not all
hits against the references must have a unique bio_search term. If
perfect=FALSE (default) all references hits that was not caught by a search
term will be annotated as references + other (e.g. "Ensembl_other"). If
perfect=TRUE, if the search terms does not catch all reference hits the
function will through an error. Can be used to ensure that all hits receive
a classification.}

\item{genome_max}{Integer indicating the number of maximum coordinates to be
reported when type="genome". If the number of hits exceedes
\code{genome_max} it will be indicated in the classification and only the
first hits up to \code{max_hits} will be reported. Useful to handling
seaquences that multimap.}

\item{merge_pac}{PAC object. If a PAC object is provided in merge_pac, then
the function will automatically merge the Anno table of the PAC object with
the newly generated annotations. As default, merge_pac=NULL that will return
a tibble dataframe instead.}
}
\value{
Dataframe with mismatch and coordinate or biotype information (search
  term hits) that can directly be added to an Anno dataframe of a PAC object,
  given that the same PAC object was used in the reannotation workflow. It
  can also be further simplifide using the \code{symplify_reanno} function.
}
\description{
\code{add_reanno} adds biotypes from reannotation to PAC.
}
\details{
Given a reanno object generated by \code{make_reanno} this function will
either extract genome coordinates or classify biotypes using a list of search
terms list (see below). Information will be compiled into a dataframe with the
same sequence order as in the original PAC master file.
}
\examples{
library(seqpac)
load(system.file("extdata", "drosophila_sRNA_pac.Rdata", package = "seqpac", mustWork = TRUE))

## Genome annotation ##
outpath_genome="/home/danis31/Desktop/Temp_docs/reanno_genome"
reanno <- make_reanno(outpath_genome, PAC=pac_master, mis_fasta_check = TRUE, threads=8)
ls.str(reanno)
names(reanno$Full_anno$mis0)
anno <- add_reanno(reanno, type="genome", mismatches = 3, genome_max=10)
pac_master <- add_reanno(reanno, type="genome", mismatches = 3, genome_max=10, merge_pac=pac_master)

## Biotype annotation ##
outpath_snc="/home/danis31/Desktop/Temp_docs/reanno_srna"
reanno <- make_reanno(outpath_snc, PAC=pac_master, mis_fasta_check = TRUE, threads=8)
ls.str(reanno)
names(reanno$Full_anno$mis0)
bio_search <- list(
                 Ensembl=c("lncRNA", "miRNA", "pre_miRNA", "rRNA", "snoRNA", "snRNA", "tRNA"),
                 miRNA="dme-",
                 tRNA =c("^tRNA", "mt:tRNA")      # ^= regular expression for start of string  
                 )
anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=TRUE, mismatches = 3) # Throughs an error
anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 3)  


## Merge with PAC object
pac_master <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 3, merge_pac=pac_master) 
as_tibble(pac_master$Anno)


## The trick to succeed with bio_perfect=TRUE ##
# Run with bio_perfect="TRUE" (look where "Other=XX" occurs)
anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 3)

# Find sequences that has been classified as other 
other_seqs  <- anno[grepl("other", anno$mis0),]$seq

# Extract sequences from the non-classified reanno object: 
tab <- reanno_srna$Full_anno$mis0$Ensembl
tab[tab$seq \%in\% other_seqs,]

# Add new search terms and repeat until perfect hits 
bio_search <- list(
                 Ensembl=c("lncRNA", "miRNA", "pre_miRNA", "rRNA", "snoRNA", "snRNA", "tRNA", "snmRNA", "asRNA", "hpRNA"),
                 miRNA="dme-",
                 tRNA =c("^tRNA", "mt:tRNA")      # ^= regular expression for start of string  
                 )
anno <- add_reanno(reanno, bio_search=bio_search, type="biotype", bio_perfect=FALSE, mismatches = 3)

}
\seealso{
\url{https://github.com/junchaoshi/sports1.0} for download and
 documentation about running Sports.
 \url{http://bowtie-bio.sourceforge.net/index.shtml} for information about
 Bowtie \url{https://github.com/Danis102} for updates on the current package.

Other PAC reannotation: 
\code{\link{check_reanno}()},
\code{\link{import_reanno}()},
\code{\link{make_reanno}()},
\code{\link{map_reanno}()},
\code{\link{simplify_reanno}()}
}
\concept{PAC reannotation}
