% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PAC_filter.R
\name{PAC_filter}
\alias{PAC_filter}
\title{Filter a PAC object on sequence size and covarage}
\usage{
PAC_filter(
  PAC,
  size = NULL,
  threshold = 0,
  coverage = 0,
  norm = "counts",
  subset_only = FALSE,
  stat = FALSE,
  pheno_target = NULL,
  anno_target = NULL
)
}
\arguments{
\item{PAC}{PAC-list object containing an Anno data.frame with sequences as
row names and a Counts table with raw counts or reads per million (cpm).}

\item{size}{Integer vector giving the size interval, as c(min,max), that
should be saved (default=c(min,max)).}

\item{threshold}{Integer giving the threshold in counts or normalized counts
that needs to be reached for a sequence to be included (default=0).}

\item{coverage}{Integer giving the percent of independent samples that need
to reach the threshold for a sequence to be included (default=0).}

\item{norm}{Character specifying if filtering should be done using "counts",
"cpm" or another normalized data table in PAC$norm (default="counts").}

\item{subset_only}{Logical whether only subsetting using pheno_target and/or
anno_target should be done. If subset=FALSE (default) both subsetting and
other filtering will be done.}

\item{stat}{(optional) Logical specifying if an coverage graph should be
generated or not (default=FALSE).}

\item{pheno_target}{(optional) List with: 
1st object being a character vector of target column in Pheno, 
2nd object being a character vector of the target group(s) in the target Pheno column (1st object).
(default=NULL)}

\item{anno_target}{(optional) List with: 
1st object being a character vector of target column in Anno, 2nd
object being a character vector of the target type/biotypes(s) in
the target Anno column (1st object).
(default=NULL)}
}
\value{
A list of objects: 
              PAC object with filtered data.   
              (optional) A covarage plot
}
\description{
\code{PAC_filter} Filter PAC objects.
}
\details{
Given a PAC object the function will extract sequences within a given size
interval and percent coverage across independent samples.
}
\examples{
library(seqpac)
load(system.file("extdata", "drosophila_sRNA_pac_anno.Rdata", package = "seqpac", mustWork = TRUE))

test1 <- PAC_filter(pac, size=c(16,45), threshold=20, coverage=50, norm="counts", stat=TRUE, pheno_target=NULL, anno_target=NULL)  # Already applied

pac_filt <- PAC_norm(pac, norm="cpm")
pac_filt <- PAC_summary(pac_filt, PAC_merge=TRUE, norm = "cpm", norm = "means",  pheno_target=list("type"))

test2 <- PAC_filter(pac_filt, size=c(16,45), threshold=20, coverage=50, norm="cpm", stat=TRUE, pheno_target=NULL, anno_target=NULL)   # Use of cpm filter

test3 <- PAC_filter(pac_filt, pheno_target=list("Unn_Sample_ID", c("B", "A")), subset_only=TRUE)   # Removes individual samples based on information in Pheno and reorder - Since summary has already been generated, throws a warnings message.

test4 <- PAC_filter(pac_filt, size=c(16,30))   # Further filter on fragment lengths 




}
\seealso{
\url{https://github.com/Danis102} for updates on the current
  package.

Other PAC analysis: 
\code{\link{PAC_covplot}()},
\code{\link{PAC_deseq}()},
\code{\link{PAC_filtsep}()},
\code{\link{PAC_gtf}()},
\code{\link{PAC_jitter}()},
\code{\link{PAC_mapper}()},
\code{\link{PAC_mismap}()},
\code{\link{PAC_nbias}()},
\code{\link{PAC_norm}()},
\code{\link{PAC_pca}()},
\code{\link{PAC_pie}()},
\code{\link{PAC_pirna}()},
\code{\link{PAC_saturation}()},
\code{\link{PAC_sizedist}()},
\code{\link{PAC_stackbar}()},
\code{\link{PAC_summary}()},
\code{\link{PAC_trna}()},
\code{\link{map_rangetype}()},
\code{\link{tRNA_class}()}
}
\concept{PAC analysis}
